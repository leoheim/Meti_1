# -*- coding: utf-8 -*-
"""LLM_Google_Apps_Script.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1k3APMDQR7y9_5jmftNtw5eT-k58hV8u5
"""

import time
import requests
import gspread
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from email.mime.text import MIMEText
import base64

GEMINI_API_KEY = "key"
SPREEDSHEET_ID = "key"

client_config = {"client_id":"599298710875-u4n98g1c2rlj7alasu03lu8sbhm7k64l.apps.googleusercontent.com",
        "project_id":"refined-stream-463719-v6",
        "auth_uri":"https://accounts.google.com/o/oauth2/auth",
        "token_uri":"https://oauth2.googleapis.com/token",
        "auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs",
        "client_secret":"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"}

SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets.readonly',
    'https://www.googleapis.com/auth/gmail.send'
]

EMAIL = 'leonardoheimwork@gmail.com'

def authenticate_google():
  creds = None
  try:
    creds = Credentials.from_client_user_file('token.json', SCOPES)
  except Exception:
    flow = InstalledAppFlow.from_client_secrets_file(client_config, SCOPES)
    creds = flow.run_local_server(port=0)
    with open('token.json', 'w') as token:
      token.write(creds.to_json())
  return creds

def get_form_responses(sheet, processed_emails):
  records = sheet.get_all_records()
  new_entries = [r for r in records if r['Email'] not in processed_emails]
  return new_entries

def generate_reply(question):
  url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${GEMINI_API_KEY}"
  payload = {
      "contents": [
          {"parts": [{"text": f"Answer the following question:\n\n{question}"}]}
      ]
  }
  res = requests.post(url, json=payload)
  data = res.json()
  try:
    return data['candidates'][0]['content']['parts'][0]['text']
  except Exception as e:
      print('error with gemini', e)
      return "thank you for your question! Soon you will have your answer"

def send_email(service, to_email, message_text):
  message = MIMEText(message_text)
  message['to'] = to_email
  message['from'] = EMAIL
  message['subject'] = 'Automatic answer to your question'
  raw = base64.urlsafe_b64encode(message.as_bytes()).decode()
  message_body = {'raw': raw}
  service.users.messages().send(userId='me', body=message_body).execute()

def main():
  creds = authenticate_google()
  gc = gspread.authorize(creds)
  sheet = gc.open_by_key(SPREEDSHEET_ID).sheet1
  gmail_service = build('gmail', 'v1', credentials=creds)

  processed_emails = set()

  while True:
    responses = get_form_responses(sheet, processed_emails)
    for r in responses:
      email = r['Email']
      question = r['Question']

      print(f"responding: {email}")
      reply = generate_reply(question)
      send_email(gmail_service, email, reply)
      processed_emails.add(email)

    print("waiting new questions...")
    time.sleep(60)

if __name__ == '__main__':
  main()